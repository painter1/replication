# Read a file generated by Estani's tools.  Generate an xml file for the -f option of bdm.
# This will cause download of the files specified by the input file, and in the same order.
# The input file is generated by one of Estani's scripts, with a command like:
#   python replica_manager.py --download-list=list_repo_dkrz --file download-pic.dkrz --dataset="cmip5.output1.%.piControl.mon.atmos.%"
# and here's a sample line of the input file:
# gsiftp://cmip2.dkrz.de:2812/cmip5/output1/MPI-M/MPI-ESM-P/piControl/mon/atmos/Amon/r1i1p1/v20111028/ps/ps_Amon_MPI-ESM-P_piControl_r1i1p1_185001-199912.nc	/export/ftp/pub/painter/cmip5/output1/MPI-M/MPI-ESM-P/piControl/mon/atmos/Amon/r1i1p1/v20111028/ps/ps_Amon_MPI-ESM-P_piControl_r1i1p1_185001-199912.nc	132768568

import re, sys
if len(sys.argv)<2:
    print "Please provide a filename argument, output from 'replica_manager.py --download-list...'."
    filename = 'download-pic-mpi1.dkrz'  # for testing convenience
else:
    filename = sys.argv[1]

def convert_bytes(bytes):   # from the Web, author "dkrs"
    bytes = float(bytes)
    if bytes >= 1099511627776:
        terabytes = bytes / 1099511627776
        size = '%.2fT' % terabytes
    elif bytes >= 1073741824:
        gigabytes = bytes / 1073741824
        size = '%.2fG' % gigabytes
    elif bytes >= 1048576:
        megabytes = bytes / 1048576
        size = '%.2fM' % megabytes
    elif bytes >= 1024:
        kilobytes = bytes / 1024
        size = '%.2fK' % kilobytes
    else:
        size = '%.2fb' % bytes
    return size


# lines=["gsiftp://cmip2.dkrz.de:2812/cmip5/output1/MPI-M/MPI-ESM-P/piControl/mon/atmos/Amon/r1i1p1/v20111028/ps/ps_Amon_MPI-ESM-P_piControl_r1i1p1_185001-199912.nc	/export/ftp/pub/painter/cmip5/output1/MPI-M/MPI-ESM-P/piControl/mon/atmos/Amon/r1i1p1/v20111028/ps/ps_Amon_MPI-ESM-P_piControl_r1i1p1_185001-199912.nc	132768568"]

#bdmopts = '-concurrency 4 -recursive -parallelism 8 -fileinactivity 3600 -cd  -waittime 30'+\
#          '-maxretrial 30 -overwrite -buffersize 4194304'
#          # These options are suitable for downloading multiple files per bdm command, from LBL.
xmlsrc = '<file>\n<source>'
xmltrgsz = '</source>\n<target size="'
xmltrgcksum='" checksum="'
xmltrgfl = '">'
xmlfin = '</target>\n</file>\n'

nfiles = 0
sizesum = 0
sizemax = 0
f = open(filename)
g = open(filename+'.xml','w')
g.write( '<request>\n' )
for line in f:
    # e.g. line = 'gsiftp://cmip2.dkrz.de:2812/cmip5/...199912.nc    /.../cmip5/....nc 132768568'
    linelist = line.replace('\n','').replace(' ','\t').split('\t')
    # e.g. ['gsiftp://cmip2.dkrz.de:2812/cmip5/...','/export/ftp...',132768568]
    url = linelist[0] # e.g. 'gsiftp://cmip2.dkrz.de:2812/cmip5/.../ps_Amon...199912.nc"
    sze = linelist[2] # e.g. 132768568
    if len(linelist)>3:
        cksum = linelist[3]  # e.g. dfa5c368a6b76c80bf879ea178edcf5f
    else:
        cksum = None

    # Try to compute a good target path from the url.  This won't always work...
    dest = linelist[1] # whatever target is in the input file
    mo = re.search('/cmip5/output1/',url)   # For now we're only interested in CMIP5 output1 data.
    if mo is not None:
        dest = '/cmip5/scratch/cmip5/output1/' + url[mo.end():]
    else:
        mo = re.search('/cmip5/',url)    # CSIRO puts everything in output rather than output1.
        if mo is not None:
            dest = '/cmip5/scratch/cmip5/' + url[mo.end():]
        if mo is None:
            mo = re.search('/dataroot/',url)    # Sometimes the incorrect path ends with /dataroot/
            dest = '/cmip5/scratch/cmip5/output1/' + url[mo.end():]

    #    bdm.append( 'nohup bdmclient -s '+url+' -t '+dest+' '+bdmopts+' &' ) #for 1 bdm per file
    if cksum is None:
        g.write( xmlsrc + url + xmltrgsz + sze + xmltrgfl + dest + xmlfin )
    else:
        g.write( xmlsrc + url + xmltrgsz + sze + xmltrgcksum + cksum + xmltrgfl + dest + xmlfin )
    sizesum += int(sze)
    sizemax = max( int(sze), sizemax )
    nfiles += 1
f.close()
g.write( '</request>\n' )
g.close()
if nfiles==0:
    print "ERROR: no files to download"
else:
    print "You can download",nfiles,"files, total size",convert_bytes(sizesum),\
          ".  The mean and maximum file sizes are",\
          convert_bytes(sizesum/float(nfiles)),",",convert_bytes(sizemax)

# Here's an example of the xml segment for downloading one file:
# <request>
# <file>
# <source>gsiftp://esgnode1.nci.org.au:2812//cmip5/output/CSIRO-QCCCE/CSIRO-Mk3-6-0/abrupt4xCO2/day/atmos/day/r10i1p1/v20110518/pr/pr_day_CSIRO-Mk3-6-0_abrupt4xCO2_r10i1p1_00010101-00051231.nc</source>
# <target 
# size="134613404">/data2/viji/bdmtest/pr_day_CSIRO-Mk3-6-0_abrupt4xCO2_r10i1p1_00010101-00051231.nc</target>
# </file>
# </request>
